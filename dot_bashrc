#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091

: "Load /etc/bashrc" && {
  test -r /etc/bashrc && . /etc/bashrc
}

: "mise" && {
    # mise がインストールされている場合は mise をロードする
    type mise &>/dev/null && {
        eval "$(mise activate bash)"
    }
}

function vscode {
    { test $# -eq 1 && test -n "$1"; } || return
    VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args "$@"
}

: "Set keybinds" && {
    # Ctrl+w をファイル名に基づく単語削除に変更する
    stty werase undef
    bind '"\C-w": unix-filename-rubout'
}

: "Define Aiases" && {
    alias rm='rm -i'
    alias cp='cp -i'
    alias mv='mv -i'
    alias ls='ls -FG --color'
    alias diff='diff --color'
    alias tmux="tmux attach -d || tmux"
    alias ag="ag -S --pager='less -R'"

    alias vim='nvim'

    alias v="view"
    alias vi="vim -u NONE -N"
    alias e='edit'
    alias edit='vim'

    alias g='git'
    alias d='docker'
    alias k='kubectl'
    alias kx='kubectl ctx'

    alias r='cd "$(ghq list -p | fzf --ansi)"'
    alias v='vscode "$(ghq list -p | fzf --ansi)"'

    alias temp='cd "$(mktemp -d -p ~/Desktop)"'
    alias t='cd "$(find ~/Desktop -maxdepth 1 -type d -name "tmp.*" | fzf --ansi)"'

    alias beep='for i in {1..3}; do afplay -t 0.33 /System/Library/Sounds/Ping.aiff; done'

    alias yless='jless --yaml'

    alias memo='vim ~/Desktop/memo.md'
}

: "Setup Completions" && {
    # ~/.bash_profile でロードしても有効になるのはログインシェルだけなので ~/.bashrc でロードしている
    # SEE ALSO: https://docs.brew.sh/Shell-Completion#configuring-completions-in-bash
    BASH_COMPLETION="$HOMEBREW_PREFIX/etc/profile.d/bash_completion.sh"
    test -r "$BASH_COMPLETION" && . "$BASH_COMPLETION"

    # なぜか git の completion だけロードされないので個別にロードする
    GIT_PREFIX=$(brew --prefix git)
    if [ -d "$GIT_PREFIX" ]; then
        . "$GIT_PREFIX/etc/bash_completion.d/git-completion.bash"
        . "$GIT_PREFIX/etc/bash_completion.d/git-prompt.sh"
    fi
}

# プロンプトを設定する
: "Setup Prompt" && {
    __ps1=""

    # git のブランチ名を表示する
    if type __git_ps1 &>/dev/null; then
        export PROMPT_DIRTRIM=2
        export GIT_PS1_SHOWDIRTYSTATE=1
        export GIT_PS1_SHOWUPSTREAM=1
        export GIT_PS1_SHOWUNTRACKEDFILES=
        export GIT_PS1_SHOWSTASHSTATE=1

        # shellcheck disable=SC2016
        __ps1=${__ps1}'\[\e[00;33m\]$(__git_ps1)'
    fi

    # kubectl のコンテキスト名を表示する
    type kubectl &>/dev/null && kubectl config current-context &>/dev/null 2>&1 && {
        # shellcheck disable=SC2016
        __ps1='\[\e[04;31m\]($(kubectl config current-context))'${__ps1}
    }

    # プロンプトを設定する
    # NOTE: tmux でプロンプトを検索しやすいように、プロンプトと入力の間を U+00a0 (NO-BREAK SPACE) にする
    export PS1=${__ps1}' \[\e[01;34m\]\w \$ \[\e[m\]'
}

: "Setup fzf" && {
    # インタラクティブシェルでのみ fzf を有効にする
    type fzf &>/dev/null && [[ $- == *i* ]] && {
        eval "$(fzf --bash)"
        export FZF_DEFAULT_OPTS="--height 40% --border --color=dark"
        # NOTE: for >= 0.36.0
        export RUNEWIDTH_EASTASIAN=0
    }
}

: "Setup direnv" && {
    type direnv &>/dev/null && {
        eval "$(direnv hook bash)"
    }
}

# : "Setup Docker" && {
    # # docker の環境は lima で構築する。インスタンス名は default とする。
    # export DOCKER_HOST=unix://$HOME/.lima/default/sock/docker.sock
    # # docker で実行するアーキテクチャは x86_64 とする
    # # NOTE: lima を vmType = vz (= aarch64) として構築しているため、指定しないと docker のイメージも aarch64 になってしまう
    # # export DOCKER_DEFAULT_PLATFORM=linux/amd64
# }

: "Setup OSC 133 Prompt" && {
    _prompt_executing=""
    function __prompt_precmd() {
        local ret="$?"
        if test "$_prompt_executing" != "0"
        then
            _PROMPT_SAVE_PS1="$PS1"
            _PROMPT_SAVE_PS2="$PS2"
            PS1='\[\e]133;P;k=i\a\]'$PS1'\[\e]133;B\a\e]122;> \a\]'
            PS2='\[\e]133;P;k=s\a\]'$PS2'\[\e]133;B\a\]'
        fi
        if test "$_prompt_executing" != ""
        then
            printf "\033]133;D;%s;aid=%s\007" "$ret" "$BASHPID"
        fi
        printf "\033]133;A;cl=m;aid=%s\007" "$BASHPID"
        _prompt_executing=0
    }
    function __prompt_preexec() {
        PS1="$_PROMPT_SAVE_PS1"
        PS2="$_PROMPT_SAVE_PS2"
        printf "\033]133;C;\007"
        _prompt_executing=1
    }
    preexec_functions+=(__prompt_preexec)
    precmd_functions+=(__prompt_precmd)
}

# Krew のパスを追加する
# NOTE:
# - mise でインストールできるが `kubectl-krew` ではないので `kubectl` がプラグインとして認識できない
# - そのため公式の手順でインストールする
#   - https://krew.sigs.k8s.io/docs/user-guide/setup/install/
# - asdf を使用してインストールする場合は `kubectl-krew` でインストールされるのでこちらの設定は不要となる
: "Setup Krew" && {
    type kubectl &>/dev/null && test -d "${KREW_ROOT:-$HOME/.krew}/bin" && {
        export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
    }
}
